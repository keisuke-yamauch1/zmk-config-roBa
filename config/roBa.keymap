#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};
&lt {
    flavor = "hold-preferred";
    hold-tap-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 11>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R          &lt 2 T                                                   &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&lt 8 A           &lt 7 S       &lt 3 D           &lt 5 F        &lt 5 G      &kp COLON               &kp EQUAL            &kp H        &kp J  &lt 2 K    &lt 7 L  &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V          &kp B        &kp UNDERSCORE          &kp DOUBLE_QUOTES    &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT    &kp LEFT_ALT  &kp LEFT_COMMAND  &kp BACKSPACE  &lt 2 SPACE  &mt LEFT_WIN LANG2      &mt RIGHT_WIN LANG1  &lt 1 ENTER                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans          &trans        &trans        &trans        &trans        &trans           &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&bt BT_CLR      &trans        &trans        &trans        &trans        &bootloader      &trans   &trans  &trans  &trans  &trans  &kp F11
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans           &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1                &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4     &kp N5                                           &kp LG(LS(LEFT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_6                &kp N7           &kp N8           &kp N9           &kp N0      &kp LC(LA(KP_NUMBER_0))      &trans  &kp EXCLAMATION         &kp AT_SIGN              &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &kp EQUAL                    &trans  &kp LEFT_BRACKET        &kp RIGHT_BRACKET        &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans      &trans                       &trans  &trans                                                                                 &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans          &trans          &trans           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q  &to_layer_0 W  &to_layer_0 E  &to_layer_0 R  &to_layer_0 T                      &to_layer_0 Y  &to_layer_0 U  &mkp MB3            &to_layer_0 O       &to_layer_0 P
&to_layer_0 A  &to_layer_0 S  &to_layer_0 D  &to_layer_0 F  &to_layer_0 G  &trans      &trans  &to_layer_0 H  &mkp MB1       &to_layer_0 ESCAPE  &mkp MB2            &to_layer_0 MINUS
&to_layer_0 Z  &to_layer_0 X  &to_layer_0 C  &to_layer_0 V  &to_layer_0 B  &trans      &trans  &to_layer_0 N  &to_layer_0 M  &to_layer_0 COMMA   &to_layer_0 PERIOD  &to_layer_0 SLASH
&trans         &trans         &trans         &trans         &trans         &trans      &trans  &trans                                                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &kp RG(W)              &kp RG(R)             &trans  &trans                      &kp RC(UP_ARROW)  &kp RC(RS(TAB))     &kp RC(TAB)          &trans  &trans
&trans  &kp RG(RIGHT_BRACKET)  &kp RG(LEFT_BRACKET)  &trans  &trans  &trans      &trans  &trans            &kp RC(LEFT_ARROW)  &kp RC(RIGHT_ARROW)  &trans  &trans
&trans  &trans                 &trans                &trans  &trans  &trans      &trans  &trans            &kp RG(SPACE)       &kp RA(SPACE)        &trans  &trans
&trans  &trans                 &trans                &trans  &trans  &trans      &trans  &trans                                                             &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &kp RG(W)              &kp RG(R)             &trans  &trans                           &kp RC(UP_ARROW)  &kp RC(RS(TAB))     &kp RC(TAB)          &trans  &trans
&trans  &kp RG(RIGHT_BRACKET)  &kp RG(LEFT_BRACKET)  &trans  &trans  &trans      &trans       &trans            &kp RC(LEFT_ARROW)  &kp RC(RIGHT_ARROW)  &trans  &trans
&trans  &trans                 &trans                &trans  &trans  &trans      &bootloader  &trans            &kp RG(SPACE)       &kp RA(SPACE)        &trans  &bt BT_CLR
&trans  &trans                 &trans                &trans  &trans  &trans      &trans       &trans                                                             &bt BT_CLR_ALL
            >;
        };

        symbol {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR  &kp PERCENT                        &kt LEFT_BRACE        &kt RIGHT_BRACE        &kp LESS_THAN  &kp GREATER_THAN  &trans
&kp LCTRL        &kp AMPERSAND  &kp ASTERISK  &trans      &trans       &trans      &kp PLUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE      &kp SEMICOLON     &kp PIPE
&trans           &trans         &trans        &trans      &trans       &trans      &kp SQT   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp TILDE      &trans            &kp NON_US_BACKSLASH
&trans           &trans         &trans        &trans      &trans       &trans      &trans    &trans                                                                        &trans
            >;
        };

        control {
            bindings = <
&trans  &trans                &trans                &trans  &trans                                    &trans     &trans     &trans     &trans     &trans
&trans  &kp LC(A)             &trans                &trans  &kp RC(G)  &trans                 &trans  &kp RC(H)  &kp RC(J)  &kp RC(K)  &kp RC(K)  &trans
&trans  &kp RS(RC(NUMBER_4))  &kp RS(RG(NUMBER_4))  &trans  &trans     &kp RC(RG(SPACE))      &trans  &trans     &trans     &trans     &trans     &trans
&trans  &trans                &trans                &trans  &trans     &trans                 &trans  &trans                                      &trans
            >;
        };
    };
};
